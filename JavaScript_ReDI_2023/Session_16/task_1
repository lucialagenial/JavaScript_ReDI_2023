<!DOCTYPE html>
<html>
<head>
</head>
<body>
<div id="mastodon"> Mastodon Fetcher </div>

<button onclick="main()">Fetch a timeline!</button>

<div id="result">Result: </div>

  <script>
    // Replace these values with your actual client ID, client secret, and user authorization code
const clientId = 'pN3-1MBlfEfGFUxDq9p9g2fOVo5axkfNpThPYlM2uq8';
const clientSecret = 'your_client_secret_here';
const userAuthCode = 'user_authzcode_here';
// Mastodon instance URL
const instanceUrl = 'https://mastodon.example';
// OAuth token endpoint
const tokenEndpoint = '/oauth/token';
// Function to request an OAuth token from Mastodon
async function requestOAuthToken() {
  // Construct the API URL
  const apiUrl = `${instanceUrl}${tokenEndpoint}`;
  // Define headers for the request
  const headers = {
    'Content-Type': 'application/x-www-form-urlencoded',
  };
  // Construct the request body
  const body = new URLSearchParams({
    client_id: clientId,
    client_secret: clientSecret,
    redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',
    grant_type: 'authorization_code',
    code: userAuthCode,
    scope: 'read write push',
  });
  // Configure the request
  const options = {
    method: 'POST',
    headers,
    body,
  };
  try {
    // Make the request using the Fetch API
    const response = await fetch(apiUrl, options);
    // Check if the request was successful (status code 2xx)
    if (response.ok) {
      // Parse the JSON response and return it
      return await response.json();
    } else {
      // If the request was not successful, throw an error with the status text
      throw new Error(`Mastodon API Error: ${response.statusText}`);
    }
  } catch (error) {
    // Catch any network or parsing errors and log them
    console.error('Error requesting OAuth token from Mastodon:', error.message);
    throw error; // Re-throw the error for handling at the calling code level
  }
}
// Example usage:
requestOAuthToken()
  .then(data => {
    console.log('OAuth Token Response:', data);
  })
  .catch(error => {
    console.error('Error:', error.message);
  });

  </script>
</body>
</html>